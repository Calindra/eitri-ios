// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Eitri
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AudioToolbox
import Cache
import CoreLocation
import CryptoKit
@_exported import Eitri
import Foundation
import GameKit
import LinkPresentation
import LocalAuthentication
import MobileCoreServices
import Network
import QuickLook
import SafariServices
import Swift
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct RunInput {
  public init(deeplink: Swift.String? = nil, workspaceId: Swift.String? = nil, slug: Swift.String? = nil, initParams: Foundation.NSDictionary? = nil, navControllerToPush: UIKit.UINavigationController? = nil)
  @available(*, deprecated, message: "Please use 'workspaceId' or 'slug' instead of 'deeplink'")
  public var deeplink: Swift.String?
  public var workspaceId: Swift.String?
  public var slug: Swift.String?
  public var initParams: Foundation.NSDictionary?
  public var navControllerToPush: UIKit.UINavigationController?
}
public struct SharedMethodParams {
  public let data: Foundation.NSDictionary
  public let slug: Swift.String
  public let openServices: Eitri.EitriOpenServicesFacade
  public var currentNavController: UIKit.UINavigationController?
  public let eitriAppExecutingMethod: Eitri.EitriAppExecutingMethod
}
public struct EitriAppExecutingMethod {
  public var slug: Swift.String
  public var version: Swift.String
}
public typealias SharedMethod = (_ params: Eitri.SharedMethodParams) async throws -> Any?
public struct DynamicMethodAddressableMessage {
  public var promiseId: Swift.String
  public var slug: Swift.String
  public var rawMessageFromOrigin: Swift.String
  public var eitriMachineInstanceId: Swift.String
}
public typealias DynamicMethodRawEventListener = (_ params: Eitri.DynamicMethodAddressableMessage) throws -> Swift.Void
public struct ExposedMethodDescriptor {
  public init(_ namespace: Swift.String, _ methodName: Swift.String)
}
public protocol WebViewCoordinatorListener : ObjectiveC.NSObjectProtocol {
  func onLoadFinished(webView: WebKit.WKWebView, origin: Swift.String)
  func onError()
}
public typealias LoadingAnimationGeneratorFunction = (_ slug: Swift.String, _ parentView: UIKit.UIView) -> UIKit.UIView
public class SuperApp {
  public init()
  @objc deinit
  public func configure(input: Eitri.ConfigureInput, isReplica: Swift.Bool = false) async throws
  public func enableCertificatePinning(challengeFunction: @escaping Eitri.CertificateChallengeFunction)
  public func setLoadingAnimationGeneratorFunction(fn: @escaping Eitri.LoadingAnimationGeneratorFunction)
  public func setCustomErrorScreenGeneratorFunction(fn: @escaping Eitri.ErrorScreenGeneratorFunction)
  public func run(runInput: Eitri.RunInput) async throws
  public func runInFrame(parentUI: UIKit.UIViewController, runInput: Eitri.RunInput) async throws -> Eitri.RunInFrameOutput
  public func prepareToRun(runInput: Eitri.RunInput, forRunningAsFrame: Swift.Bool = false) async throws -> UIKit.UIViewController
  public func stop() async throws
  public func getInitializationInfos() async -> Foundation.NSDictionary?
  public func getEnvironmentConfig() async -> Eitri.ConfigureEitriEnvironmentResponse?
  public func openEitriAppOnCurrentNativeView(runInput: Eitri.RunInput) async throws
  public func prefetchResources(prefetchResources: Swift.Bool) async
}
public struct ThemeUtils {
  public static func isDarkMode() -> Swift.Bool
  public static func parseHexColor(_ hexString: Swift.String) -> UIKit.UIColor
  public static func isDarkColor(_ color: UIKit.UIColor) -> Swift.Bool
}
public typealias CertificateChallengeFunction = (_ challenge: Foundation.URLAuthenticationChallenge, _ completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void
public struct DownloadInput : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HttpResponse {
}
public struct HttpConfig : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HttpCallParams {
  public init(url: Swift.String, data: Any? = nil, config: Eitri.HttpConfig? = nil)
}
public struct CallHttpMethodInput {
  public init(methodName: Eitri.HttpMethod, params: Eitri.HttpCallParams)
}
public enum HttpMethod : Swift.String {
  case Get
  case Post
  case Put
  case Delete
  case Patch
  case Head
  case Options
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HttpRequestError : Swift.Error {
  case invalidUrl
  case requestFail
  case httpProtocolNotAllowed
  public static func == (a: Eitri.HttpRequestError, b: Eitri.HttpRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum httpMethodInputError : Swift.Error {
  case failedToGetHeaders
  case failedToGetData
  case failedToParseData
  public static func == (a: Eitri.httpMethodInputError, b: Eitri.httpMethodInputError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConfigureEitriEnvironmentResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BiometricCheckStatusOutput {
  public var type: Eitri.BiometricType?
  public var status: Eitri.BiometricCheckStatus
}
public struct BiometricAuthenticateOutput {
  public var result: Eitri.BiometricResult?
  public var detail: Any?
}
public enum BiometricType : Swift.String {
  case TouchID
  case FaceID
  case None
  case Password
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BiometricCheckStatus {
  case AVAILABLE
  case UNAVAILABLE
  case BLOCKED
  case NOT_SUPPORTED
  public static func == (a: Eitri.BiometricCheckStatus, b: Eitri.BiometricCheckStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BiometricResult {
  case SUCCESS
  case FAILURE
  public static func == (a: Eitri.BiometricResult, b: Eitri.BiometricResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OpenBiometricAuthenticateInput {
  public init(useDevicePasswordAsFallback: Swift.Bool? = nil, authenticationReason: Swift.String)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EitriOpenBiometricService : Eitri.EitriOpenService {
  public func checkStatus() throws -> Eitri.BiometricCheckStatusOutput
  public func authenticate(_ input: Eitri.OpenBiometricAuthenticateInput) async throws -> Eitri.BiometricAuthenticateOutput
  @objc deinit
}
public struct OpenInput {
  public var slug: Swift.String
  public var initParams: Foundation.NSDictionary?
  public var restorationContext: Foundation.NSDictionary?
  public var resetStack: Swift.Bool
}
public struct ConfigureInput {
  public init(version: Swift.String, environmentKey: Swift.String, sandbox: Swift.Bool = false, debugMode: Swift.Bool = false, certificatePinningChallengeFunction: Eitri.CertificateChallengeFunction? = nil, alternativeInfrastructure: Eitri.AlternativeInfrastructure? = nil, maxConfigureTimeout: Swift.Double? = 20000, showWorkspaceBanner: Swift.Bool = false)
}
public struct HttpError : Swift.Error {
}
public enum HttpServiceError : Swift.Error {
  case timeOutExceeded
  case downloadFileFailed
  public static func == (a: Eitri.HttpServiceError, b: Eitri.HttpServiceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HttpErrorResponse {
}
public struct HttpErrorRequest {
}
public struct TabViewInput {
  public init(tabViewLayout: Eitri.TabViewLayout, tabViewItemList: [Eitri.TabViewItem], navControllerToPush: UIKit.UINavigationController? = nil)
}
public struct TabViewLayout {
  public init(customTab: any Eitri.EitriCustomTabUI)
}
public protocol EitriCustomVCDelegate {
  func notifyScrollDirectionChanged(direction: Swift.String)
}
public protocol EitriCustomVCMessageReceiver {
  func onUserTappedActiveTab()
  func receiveDelegate(delegate: any Eitri.EitriCustomVCDelegate)
}
public protocol EitriTabViewItemCustomVC : UIKit.UIViewController, Eitri.EitriCustomVCMessageReceiver {
}
public struct TabViewItemCustomAction {
  public init(action: @escaping () -> Swift.Void)
}
public struct TabViewItem {
  public init(runInput: Eitri.RunInput? = nil, customViewController: (any Eitri.EitriTabViewItemCustomVC)? = nil, customAction: Eitri.TabViewItemCustomAction? = nil)
}
@_hasMissingDesignatedInitializers public class EitriOpenServicesFacade {
  public func getBiometricService() throws -> Eitri.EitriOpenBiometricService
  @objc deinit
}
public typealias ErrorScreenGeneratorFunction = (_ slug: Swift.String, _ parentView: UIKit.UIView, _ retryFn: @escaping () -> Swift.Void, _ cancelFn: @escaping () -> Swift.Void) -> UIKit.UIView
public struct EitriMachine {
  public let bridge: Eitri.Bridge
  public let rawBrige: Eitri.RawBridge
  public let currentEitriApp: Eitri.EitriApp
  public init()
  public func instanceId() -> Swift.String
  public func configure(input: Eitri.ConfigureInput) async throws
  public func enableCertificatePinning(challengeFunction: @escaping Eitri.CertificateChallengeFunction)
  public func forceLanguage(language: Swift.String) throws
  public func run(options: Eitri.RunInput) async throws
  public func runInFrame(parentUI: UIKit.UIViewController, options: Eitri.RunInput) async throws -> Eitri.RunInFrameOutput
  public func stop() async throws
  public func addOnStopListener(fn: @escaping Eitri.OnStopListener)
  public func createReplica() async throws -> Eitri.EitriMachine
  public func getRemoteConfigs() async throws -> Foundation.NSDictionary?
  public func setLoadingAnimationGeneratorFunction(fn: @escaping Eitri.LoadingAnimationGeneratorFunction)
  public func setCustomErrorScreenGeneratorFunction(fn: @escaping Eitri.ErrorScreenGeneratorFunction)
  public func setNavControllerForNativeNavigation(_ navController: UIKit.UINavigationController?)
  public func getNavControllerForNativeNavigation() -> UIKit.UINavigationController?
  public func prefetchResources() async
}
public struct EitriApp {
  public let eventBus: Eitri.EventBus
}
public struct EventBus {
  public func publish(channel: Swift.String, data: Any?) throws
}
public struct Bridge {
  public func exposeMethod(namespace: Swift.String, methodName: Swift.String, fn: @escaping Eitri.SharedMethod) throws
  public func exposeNativeNavigationApi(eitriMachineStack: Eitri.EitriMachineStack) throws
}
public struct RawBridge {
  public func exposeMethodsWithListener(methods: [Eitri.ExposedMethodDescriptor], listener: @escaping Eitri.DynamicMethodRawEventListener) throws
  public func resolveMethodExecution(promiseId: Swift.String, data: Swift.String) throws
  public func rejectMethodExecution(promiseId: Swift.String, data: Swift.String) throws
}
public protocol EitriTabViewDelegate : AnyObject {
  func reportSelectedItem(idx: Swift.Int) -> Swift.Bool
  func reportSafeArea(height: Swift.Double)
}
public protocol EitriCustomTabUI : UIKit.UIView {
  func receiveDelegate(delegate: any Eitri.EitriTabViewDelegate)
  func adjustPosition(parentView: UIKit.UIView)
  func scrollDirectionChanged(infos: Eitri.ScrollDirectionChangedModel)
}
public class EitriMachineStack {
  public init(defaultEitriMachineInstance: Eitri.EitriMachine?)
  public func peek() -> Eitri.EitriMachine?
  public func pop() -> Eitri.EitriMachine?
  public func get(id: Swift.String) -> Eitri.EitriMachine?
  public func createReplicaInstance() async throws -> Eitri.EitriMachine
  public func createReplicaAndRunFromExposedMethods(_ sharedMethodParams: Eitri.SharedMethodParams) async throws -> Eitri.EitriMachine
  @objc deinit
}
public struct RunInFrameOutput {
}
@_hasMissingDesignatedInitializers public class EitriOpenService {
  @objc deinit
}
extension UIKit.UIGestureRecognizer {
  @_Concurrency.MainActor @preconcurrency public static func withFn(_ closure: @escaping () -> Swift.Void) -> UIKit.UIGestureRecognizer
}
public struct ScrollDirectionChangedModel : Swift.Codable {
  public var direction: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EitriViewControllerUtils {
  public static func topView(base: UIKit.UIViewController? = EitriViewControllerUtils.getRootViewController(), depth: Swift.Int = 0, searchInsideBottomBars: Swift.Bool = true) -> UIKit.UIViewController?
  public static func getRootViewController() -> UIKit.UIViewController?
  @objc deinit
}
public class HttpService {
  public init(httpClient: Foundation.URLSession)
  public func request(_ httpMethodInput: Eitri.CallHttpMethodInput) async throws -> Eitri.HttpResponse
  public func download(_ downloadInput: Eitri.DownloadInput, completionHandler: @escaping @Sendable (Foundation.URL?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) throws
  @objc deinit
}
public struct EitriMachineInstanceManagerContext {
  public var mainMachine: Eitri.EitriMachine
  public var mainStack: Eitri.EitriMachineStack
}
@_hasMissingDesignatedInitializers public class EitriMachineInstanceManager {
  public static func start() -> Eitri.EitriMachineInstanceManagerContext
  public static func getCurrentContext() -> Eitri.EitriMachineInstanceManagerContext?
  public static func getCurrentContextOrError() throws -> Eitri.EitriMachineInstanceManagerContext
  @objc deinit
}
public struct SafeAreaInsets {
}
public typealias OnStopListener = (_ instanceId: Swift.String) throws -> Swift.Void
public struct AlternativeInfrastructure {
  public init(configEndpoint: Swift.String? = nil)
}
public struct MultiWorkspaceContext {
  public var enabled: Swift.Bool
  public var albCookie: Swift.String?
}
public struct SuperAppContext {
  public var version: Swift.String
  public var environmentKey: Swift.String
  public var debugMode: Swift.Bool
  public var multiWorkspaceContext: Eitri.MultiWorkspaceContext
  public var forceLanguage: Swift.String?
  public var safeAreaInsets: Eitri.SafeAreaInsets?
  public var showWorkspaceBanner: Swift.Bool
}
public class EitriBottomTabView {
  public init(_ mainEitriMachine: Eitri.EitriMachine)
  public func run(_ tabViewInput: Eitri.TabViewInput) async throws
  public func getEitriMachineList() -> [Eitri.EitriMachine]
  public func getCurrentEitriMachine() -> Eitri.EitriMachine?
  public func getMainView() -> UIKit.UIViewController?
  @objc deinit
}
public enum SuperAppErrors : Swift.Error {
  case alreadyInitialized
  case unableToConfigureWhileRunningEitriApps
  case mustCallConfigureBeforeRunEitriApp
  case mustCallConfigureBeforeCallForceLanguage
  case eitriEnvironmentKeyMissing
  case invalidResourceToOpen
  public static func == (a: Eitri.SuperAppErrors, b: Eitri.SuperAppErrors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Eitri.HttpMethod : Swift.Equatable {}
extension Eitri.HttpMethod : Swift.Hashable {}
extension Eitri.HttpMethod : Swift.RawRepresentable {}
extension Eitri.HttpRequestError : Swift.Equatable {}
extension Eitri.HttpRequestError : Swift.Hashable {}
extension Eitri.httpMethodInputError : Swift.Equatable {}
extension Eitri.httpMethodInputError : Swift.Hashable {}
extension Eitri.BiometricType : Swift.Equatable {}
extension Eitri.BiometricType : Swift.Hashable {}
extension Eitri.BiometricType : Swift.RawRepresentable {}
extension Eitri.BiometricCheckStatus : Swift.Equatable {}
extension Eitri.BiometricCheckStatus : Swift.Hashable {}
extension Eitri.BiometricResult : Swift.Equatable {}
extension Eitri.BiometricResult : Swift.Hashable {}
extension Eitri.HttpServiceError : Swift.Equatable {}
extension Eitri.HttpServiceError : Swift.Hashable {}
extension Eitri.SuperAppErrors : Swift.Equatable {}
extension Eitri.SuperAppErrors : Swift.Hashable {}
