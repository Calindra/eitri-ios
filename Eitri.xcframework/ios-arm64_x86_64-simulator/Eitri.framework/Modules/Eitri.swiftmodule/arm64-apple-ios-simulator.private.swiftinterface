// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name Eitri
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import AVFoundation
import AudioToolbox
import CoreLocation
import CryptoKit
@_exported import Eitri
import Foundation
import GameKit
import LinkPresentation
import LocalAuthentication
import MobileCoreServices
import Network
import ObjectiveC
import PhotosUI
import QuickLook
import SafariServices
import StoreKit
import Swift
import UIKit
import UserNotifications
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct RunInput {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(workspaceId: Swift.String? = nil, slug: Swift.String? = nil, initParams: Swift.Dictionary<Swift.String, Any?>? = nil, navControllerToPush: UIKit.UINavigationController? = nil)
  #endif
  public var workspaceId: Swift.String?
  public var slug: Swift.String?
  public var initParams: Swift.Dictionary<Swift.String, Any?>?
  public var navControllerToPush: UIKit.UINavigationController?
}
public struct SharedMethodParams {
  public let data: Swift.Dictionary<Swift.String, Any?>
  public let slug: Swift.String
  public let openServices: Eitri.EitriOpenServicesFacade
  public var currentNavController: UIKit.UINavigationController?
  public let eitriAppExecutingMethod: Eitri.EitriAppExecutingMethod
}
public struct EitriAppExecutingMethod {
  public var slug: Swift.String
  public var version: Swift.String
}
public typealias SharedMethod = (_ params: Eitri.SharedMethodParams) async throws -> Any?
public struct DynamicMethodAddressableMessage {
  public var promiseId: Swift.String
  public var slug: Swift.String
  public var rawMessageFromOrigin: Swift.String
  public var eitriMachineInstanceId: Swift.String
}
public typealias DynamicMethodRawEventListener = (_ params: Eitri.DynamicMethodAddressableMessage) throws -> Swift.Void
public struct ExposedMethodDescriptor {
  public init(_ namespace: Swift.String, _ methodName: Swift.String)
}
public protocol WebViewCoordinatorListener : ObjectiveC.NSObjectProtocol {
  func onLoadFinished(webView: WebKit.WKWebView, origin: Swift.String)
  func onError()
}
public typealias LoadingAnimationGeneratorFunction = @_Concurrency.MainActor (_ slug: Swift.String, _ parentView: UIKit.UIView) -> UIKit.UIView
public class SuperApp {
  public init()
  @objc deinit
  public func configure(input: Eitri.ConfigureInput, isReplica: Swift.Bool = false) async throws
  public func createEitriMachineReplica() async throws -> Eitri.EitriMachine
  public func enableCertificatePinning(challengeFunction: @escaping Eitri.CertificateChallengeFunction)
  public func setLoadingAnimationGeneratorFunction(fn: @escaping Eitri.LoadingAnimationGeneratorFunction)
  public func setCustomErrorScreenGeneratorFunction(fn: @escaping Eitri.ErrorScreenGeneratorFunction)
  public func run(runInput: Eitri.RunInput) async throws
  public func runInFrame(parentUI: UIKit.UIViewController, runInput: Eitri.RunInput) async throws -> Eitri.RunInFrameOutput
  public func stop() async throws
  #if compiler(>=5.3) && $NonescapableTypes
  public func getInitializationInfos() async -> Swift.Dictionary<Swift.String, Any?>?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getEnvironmentConfig(_ forceRefresh: Swift.Bool = false) async -> Eitri.ConfigureEitriEnvironmentResponse?
  #endif
  public func openEitriAppOnCurrentNativeView(runInput: Eitri.RunInput) async throws
  public func prefetchResources(prefetchResources: Swift.Bool) async
}
public struct ThemeUtils {
  public static func isDarkMode() -> Swift.Bool
  public static func parseHexColor(_ hexString: Swift.String) -> UIKit.UIColor
  public static func isDarkColor(_ color: UIKit.UIColor) -> Swift.Bool
}
public typealias CertificateChallengeFunction = @Sendable (_ challenge: Foundation.URLAuthenticationChallenge, _ completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void
public struct DownloadInput : Swift.Codable {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(url: Swift.String, fileName: Swift.String, httpConfig: Eitri.HttpConfig?, shared: Swift.Bool? = false)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HttpResponse {
}
public struct HttpConfig : Swift.Codable {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(headers: [Swift.String : Swift.String]? = nil, timeout: Swift.Double? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct HttpCallParams {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(url: Swift.String, data: Any? = nil, config: Eitri.HttpConfig? = nil)
  #endif
}
public struct CallHttpMethodInput {
  public init(methodName: Eitri.HttpMethod, params: Eitri.HttpCallParams)
}
public enum HttpMethod : Swift.String, Swift.Codable {
  case Get
  case Post
  case Put
  case Delete
  case Patch
  case Head
  case Options
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HttpRequestError : Swift.Error {
  case invalidUrl
  case requestFail
  case httpProtocolNotAllowed
  public static func == (a: Eitri.HttpRequestError, b: Eitri.HttpRequestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum httpMethodInputError : Swift.Error {
  case failedToGetHeaders
  case failedToGetData
  case failedToParseData
  public static func == (a: Eitri.httpMethodInputError, b: Eitri.httpMethodInputError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConfigureEitriEnvironmentResponse : Swift.Codable, Swift.Sendable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BiometricCheckStatusOutput {
  public var type: Eitri.BiometricType?
  public var status: Eitri.BiometricCheckStatus
}
public struct BiometricAuthenticateOutput {
  public var result: Eitri.BiometricResult?
  public var detail: Any?
}
public enum BiometricType : Swift.String {
  case TouchID
  case FaceID
  case None
  case Password
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BiometricCheckStatus {
  case AVAILABLE
  case UNAVAILABLE
  case BLOCKED
  case NOT_SUPPORTED
  public static func == (a: Eitri.BiometricCheckStatus, b: Eitri.BiometricCheckStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum BiometricResult {
  case SUCCESS
  case FAILURE
  public static func == (a: Eitri.BiometricResult, b: Eitri.BiometricResult) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct OpenBiometricAuthenticateInput {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(useDevicePasswordAsFallback: Swift.Bool? = nil, authenticationReason: Swift.String)
  #endif
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EitriOpenBiometricService : Eitri.EitriOpenService {
  public func checkStatus() throws -> Eitri.BiometricCheckStatusOutput
  @_Concurrency.MainActor public func authenticate(_ input: Eitri.OpenBiometricAuthenticateInput) async throws -> Eitri.BiometricAuthenticateOutput
  @objc deinit
}
public struct OpenInput {
  public var slug: Swift.String
  public var initParams: Swift.Dictionary<Swift.String, Any?>?
  public var restorationContext: Swift.Dictionary<Swift.String, Any?>?
  public var replace: Swift.Bool
  public var resetStack: Swift.Bool
}
public struct UpdateTabBadgeInput : Swift.Codable {
  public let index: Swift.Int?
  public let content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ChangeCurrentTabOptions {
  public var index: Swift.Int?
}
public struct ConfigureInput {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(version: Swift.String, environmentKey: Swift.String, sandbox: Swift.Bool = false, debugMode: Swift.Bool = false, certificatePinningChallengeFunction: Eitri.CertificateChallengeFunction? = nil, alternativeInfrastructure: Eitri.AlternativeInfrastructure? = nil, maxConfigureTimeout: Swift.Double? = 20000, showWorkspaceBanner: Swift.Bool = false, theme: Eitri.ThemeConfig? = nil)
  #endif
}
public struct HttpError : Swift.Error {
}
public enum HttpServiceError : Swift.Error {
  case timeOutExceeded
  case downloadFileFailed
  public static func == (a: Eitri.HttpServiceError, b: Eitri.HttpServiceError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HttpErrorResponse {
}
public struct HttpErrorRequest {
}
public struct TabViewInput {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(tabViewLayout: Eitri.TabViewLayout, tabViewItemList: [Eitri.TabViewItem], navControllerToPush: UIKit.UINavigationController? = nil, allowBackNavigationOnRoot: Swift.Bool = false)
  #endif
}
public struct TabViewLayout {
  public init(customTab: any Eitri.EitriCustomTabUI)
}
public protocol EitriCustomVCDelegate {
  func notifyScrollDirectionChanged(directionChangeInfos: Eitri.ScrollDirectionChangedModel)
}
public protocol EitriCustomVCMessageReceiver {
  func onUserTappedActiveTab()
  func receiveDelegate(delegate: any Eitri.EitriCustomVCDelegate)
}
public protocol EitriTabViewItemCustomVC : UIKit.UIViewController, Eitri.EitriCustomVCMessageReceiver {
}
public struct TabViewItemCustomAction {
  public init(action: @escaping () -> Swift.Void)
}
public struct TabViewItem {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(runInput: Eitri.RunInput? = nil, customViewController: (any Eitri.EitriTabViewItemCustomVC)? = nil, customAction: Eitri.TabViewItemCustomAction? = nil)
  #endif
}
@_hasMissingDesignatedInitializers public class EitriOpenServicesFacade {
  public func getBiometricService() throws -> Eitri.EitriOpenBiometricService
  @objc deinit
}
public struct EitriAppErrorContext {
  public let slug: Swift.String
  public let runningAsFrame: Swift.Bool
}
public typealias ErrorScreenGeneratorFunction = @_Concurrency.MainActor (_ errorContext: Eitri.EitriAppErrorContext, _ parentView: UIKit.UIView, _ retryFn: @escaping () -> Swift.Void, _ cancelFn: @escaping () -> Swift.Void) -> UIKit.UIView
public struct EitriMachine {
  public let bridge: Eitri.Bridge
  public let rawBrige: Eitri.RawBridge
  public let currentEitriApp: Eitri.EitriApp
  public init()
  public func instanceId() -> Swift.String
  public func configure(input: Eitri.ConfigureInput) async throws
  public func enableCertificatePinning(challengeFunction: @escaping Eitri.CertificateChallengeFunction)
  public func forceLanguage(language: Swift.String) throws
  public func run(options: Eitri.RunInput) async throws
  public func runInFrame(parentUI: UIKit.UIViewController, options: Eitri.RunInput) async throws -> Eitri.RunInFrameOutput
  public func stop() async throws
  public func addOnStopListener(fn: @escaping Eitri.OnStopListener)
  public func addOnDeviceShakeListener(fn: @escaping Eitri.OnDeviceShakeListener)
  public func createReplica() async throws -> Eitri.EitriMachine
  #if compiler(>=5.3) && $NonescapableTypes
  public func getRemoteConfigs() async throws -> Foundation.NSDictionary?
  #endif
  public func setLoadingAnimationGeneratorFunction(fn: @escaping Eitri.LoadingAnimationGeneratorFunction)
  public func setCustomErrorScreenGeneratorFunction(fn: @escaping Eitri.ErrorScreenGeneratorFunction)
  #if compiler(>=5.3) && $NonescapableTypes
  public func setNavControllerForNativeNavigation(_ navController: UIKit.UINavigationController?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getNavControllerForNativeNavigation() -> UIKit.UINavigationController?
  #endif
  public func prefetchResources() async
}
public struct EitriApp {
  public let eventBus: Eitri.EventBus
}
public struct EventBus {
  #if compiler(>=5.3) && $NonescapableTypes
  public func publish(channel: Swift.String, data: Any?) throws
  #endif
}
public struct Bridge {
  public func exposeMethod(namespace: Swift.String, methodName: Swift.String, fn: @escaping Eitri.SharedMethod) throws
  public func exposeNativeNavigationApi(eitriMachineStack: Eitri.EitriMachineStack) throws
}
public struct RawBridge {
  public func exposeMethodsWithListener(methods: [Eitri.ExposedMethodDescriptor], listener: @escaping Eitri.DynamicMethodRawEventListener) throws
  public func resolveMethodExecution(promiseId: Swift.String, data: Swift.String) throws
  public func rejectMethodExecution(promiseId: Swift.String, data: Swift.String) throws
}
public protocol EitriTabViewDelegate : AnyObject {
  func reportSelectedItem(idx: Swift.Int) -> Swift.Bool
  func reportSafeArea(height: Swift.Double)
}
public protocol EitriCustomTabUI : UIKit.UIView {
  func receiveDelegate(delegate: any Eitri.EitriTabViewDelegate)
  func adjustPosition(parentView: UIKit.UIView)
  func scrollDirectionChanged(directionChangeInfos: Eitri.ScrollDirectionChangedModel) throws
  func changeVisibility(show: Swift.Bool) throws
  func changeCurrentTab(changeCurrentTabOptions: Eitri.ChangeCurrentTabOptions) throws
  func updateTabBadge(updateTabBadgeInput: Eitri.UpdateTabBadgeInput) throws
}
extension Eitri.EitriCustomTabUI {
  public func changeCurrentTab(changeCurrentTabOptions: Eitri.ChangeCurrentTabOptions) throws
  public func updateTabBadge(updateTabBadgeInput: Eitri.UpdateTabBadgeInput) throws
}
public class EitriMachineStack {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(defaultEitriMachineInstance: Eitri.EitriMachine?)
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func peek() -> Eitri.EitriMachine?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func pop() -> Eitri.EitriMachine?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func get(id: Swift.String) -> Eitri.EitriMachine?
  #endif
  public func createReplicaInstance() async throws -> Eitri.EitriMachine
  public func createReplicaInstanceFromRoot() async throws -> Eitri.EitriMachine
  public func createReplicaAndRunFromExposedMethods(_ sharedMethodParams: Eitri.SharedMethodParams) async throws -> Eitri.EitriMachine
  @objc deinit
}
public struct BottomBarChangeOptionsModel : Swift.Codable {
  public let index: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RunInFrameOutput {
  public let viewController: UIKit.UIViewController
}
@_hasMissingDesignatedInitializers public class EitriOpenService {
  @objc deinit
}
extension UIKit.UIGestureRecognizer {
  @_Concurrency.MainActor public static func withFn(_ closure: @escaping () -> Swift.Void) -> Self
}
public enum ScrollDirection : Swift.String, Swift.Codable {
  case up
  case down
  #if compiler(>=5.3) && $NonescapableTypes
  public init?(rawValue: Swift.String)
  #endif
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ScrollDirectionChangedModel : Swift.Codable {
  public var direction: Eitri.ScrollDirection
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class EitriViewControllerUtils {
  #if compiler(>=5.3) && $NonescapableTypes
  public static func topView(base: UIKit.UIViewController? = EitriViewControllerUtils.getRootViewController(), depth: Swift.Int = 0, searchInsideBottomBars: Swift.Bool = true) -> UIKit.UIViewController?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func getRootViewController() -> UIKit.UIViewController?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public static func getKeyWindow() -> UIKit.UIWindow?
  #endif
  public static func configureModalForIPad(viewControllerToBePresented: UIKit.UIViewController, sourceViewController: UIKit.UIViewController)
  @objc deinit
}
public class HttpService {
  public init(httpClient: Foundation.URLSession)
  public func request(_ httpMethodInput: Eitri.CallHttpMethodInput) async throws -> Eitri.HttpResponse
  #if compiler(>=5.3) && $NonescapableTypes
  public func download(_ downloadInput: Eitri.DownloadInput, completionHandler: @escaping @Sendable (Foundation.URL?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void) throws
  #endif
  @objc deinit
}
public struct EitriMachineInstanceManagerContext {
  public var mainMachine: Eitri.EitriMachine
  public var mainStack: Eitri.EitriMachineStack
}
@_hasMissingDesignatedInitializers public class EitriMachineInstanceManager {
  public static func start() -> Eitri.EitriMachineInstanceManagerContext
  #if compiler(>=5.3) && $NonescapableTypes
  public static func getCurrentContext() -> Eitri.EitriMachineInstanceManagerContext?
  #endif
  public static func getCurrentContextOrError() throws -> Eitri.EitriMachineInstanceManagerContext
  @objc deinit
}
public typealias OnDeviceShakeListener = (_ currentViewController: UIKit.UIViewController) throws -> Swift.Void
public struct Theme : Swift.Codable {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(backgroundColor: Swift.String? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ThemeConfig : Swift.Codable {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(light: Eitri.Theme? = nil, dark: Eitri.Theme? = nil)
  #endif
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SafeAreaInsets {
}
public typealias OnStopListener = (_ instanceId: Swift.String) throws -> Swift.Void
public struct AlternativeInfrastructure {
  #if compiler(>=5.3) && $NonescapableTypes
  public init(configEndpoint: Swift.String? = nil)
  #endif
}
public struct MultiWorkspaceContext {
  public var enabled: Swift.Bool
  public var albCookie: Swift.String?
}
public struct SuperAppContext {
  public var version: Swift.String
  public var environmentKey: Swift.String
  public var debugMode: Swift.Bool
  public var multiWorkspaceContext: Eitri.MultiWorkspaceContext
  public var forceLanguage: Swift.String?
  public var safeAreaInsets: Eitri.SafeAreaInsets?
  public var showWorkspaceBanner: Swift.Bool
  public var theme: Eitri.ThemeConfig?
}
public class EitriBottomTabView {
  public init(_ mainEitriMachine: Eitri.EitriMachine)
  @_Concurrency.MainActor public func run(_ tabViewInput: Eitri.TabViewInput) async throws
  public func getEitriMachineList() -> [Eitri.EitriMachine]
  #if compiler(>=5.3) && $NonescapableTypes
  public func getCurrentEitriMachine() -> Eitri.EitriMachine?
  #endif
  #if compiler(>=5.3) && $NonescapableTypes
  public func getMainView() -> UIKit.UIViewController?
  #endif
  @objc deinit
}
public enum SuperAppErrors : Swift.Error {
  case alreadyInitialized
  case unableToConfigureWhileRunningEitriApps
  case mustCallConfigureBeforeRunEitriApp
  case mustCallConfigureBeforeCallForceLanguage
  case eitriEnvironmentKeyMissing
  case invalidResourceToOpen
  public static func == (a: Eitri.SuperAppErrors, b: Eitri.SuperAppErrors) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Eitri.HttpMethod : Swift.Equatable {}
extension Eitri.HttpMethod : Swift.Hashable {}
extension Eitri.HttpMethod : Swift.RawRepresentable {}
extension Eitri.HttpRequestError : Swift.Equatable {}
extension Eitri.HttpRequestError : Swift.Hashable {}
extension Eitri.httpMethodInputError : Swift.Equatable {}
extension Eitri.httpMethodInputError : Swift.Hashable {}
extension Eitri.BiometricType : Swift.Equatable {}
extension Eitri.BiometricType : Swift.Hashable {}
extension Eitri.BiometricType : Swift.RawRepresentable {}
extension Eitri.BiometricCheckStatus : Swift.Equatable {}
extension Eitri.BiometricCheckStatus : Swift.Hashable {}
extension Eitri.BiometricResult : Swift.Equatable {}
extension Eitri.BiometricResult : Swift.Hashable {}
extension Eitri.HttpServiceError : Swift.Equatable {}
extension Eitri.HttpServiceError : Swift.Hashable {}
extension Eitri.ScrollDirection : Swift.Equatable {}
extension Eitri.ScrollDirection : Swift.Hashable {}
extension Eitri.ScrollDirection : Swift.RawRepresentable {}
extension Eitri.SuperAppErrors : Swift.Equatable {}
extension Eitri.SuperAppErrors : Swift.Hashable {}
